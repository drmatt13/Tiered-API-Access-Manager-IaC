AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: |
  Description for the application.

Globals:
  Function:
    Timeout: 3

Parameters:
  VpcCidr:
    Type: String
    Default: 192.168.0.0/16
    Description: CIDR block for the VPC.
  PublicSubnet1Az:
    Type: String
    Default: us-east-1a
    Description: Availability Zone for public subnet 1.
  PublicSubnet2Az:
    Type: String
    Default: us-east-1b
    Description: Availability Zone for public subnet 2.
  PrivateSubnet1Az:
    Type: String
    Default: us-east-1a
    Description: Availability Zone for private subnet 1.
  PrivateSubnet2Az:
    Type: String
    Default: us-east-1b
    Description: Availability Zone for private subnet 2.
  PublicSubnet1Cidr:
    Type: String
    Default: 192.168.1.0/24
    Description: CIDR block for public subnet 1.
  PublicSubnet2Cidr:
    Type: String
    Default: 192.168.2.0/24
    Description: CIDR block for public subnet 2.
  PrivateSubnet1Cidr:
    Type: String
    Default: 192.168.3.0/24
    Description: CIDR block for private subnet 1.
  PrivateSubnet2Cidr:
    Type: String
    Default: 192.168.4.0/24
    Description: CIDR block for private subnet 2.
  AmiId:
    Type: String
    Default: ami-06b21ccaeff8cd686
    Description: AMI ID for the EC2 instances.
  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type.
  PaidUsagePlanQuotaLimit:
    Type: Number
    Default: '50000'
    Description: The maximum number of requests for the Paid plan per day.
  PaidUsagePlanBurstLimit:
    Type: Number
    Default: '100'
    Description: The burst limit for the Paid plan.
  PaidUsagePlanRateLimit:
    Type: Number
    Default: '50'
    Description: The rate limit for the Paid plan.
  FreeUsagePlanQuotaLimit:
    Type: Number
    Default: '500'
    Description: The maximum number of requests for the Free plan per day.
  FreeUsagePlanBurstLimit:
    Type: Number
    Default: '10'
    Description: The burst limit for the Free plan.
  FreeUsagePlanRateLimit:
    Type: Number
    Default: '5'
    Description: The rate limit for the Free plan.
  NotificationEmail:
    Type: String
    Default: user@example.com
    Description: Email address to receive DLQ alarm notifications
  IncludePreSignUpTrigger:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Set to true if you want to include the PreSignUp Lambda trigger.

Conditions:
  UsePreSignUp: !Equals
    - !Ref IncludePreSignUpTrigger
    - 'true'

Outputs:
  FrontEndApiUrl:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub https://${FrontEndApi}.execute-api.${AWS::Region}.amazonaws.com/prod
  CognitoUserPoolId:
    Description: User Pool ID
    Value: !Ref UserPool
  CognitoClientId:
    Description: User Pool Client ID
    Value: !Ref UserPoolClient
  ApiKeyThrottledApi:
    Description: API Key for the Throttled API Gateway
    Value: !Sub https://${ApiKeyThrottledApi}.execute-api.${AWS::Region}.amazonaws.com/prod
  FrontEndWebsiteURL:
    Description: URL for the S3 bucket website
    Value: !Sub http://${S3StaticHostingBucket}.s3-website-${AWS::Region}.amazonaws.com
    Export:
      Name: WebsiteURL
  BucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3StaticHostingBucket
    Export:
      Name: BucketName

Resources:
  # COGNITO --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      LambdaConfig:
        PostConfirmation: !GetAtt CognitoPostConfirmationFunction.Arn
        CustomMessage: !GetAtt CognitoCustomMessageFunction.Arn
        PreSignUp: !If
          - UsePreSignUp
          - !GetAtt PreSignUpFunction.Arn
          - !Ref AWS::NoValue # This removes the PreSignUp if the condition is false
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: |
          Your verification code is {####} for the Tiered API Access Manager IaC application. Please return and enter this code on the verification page.
        EmailSubject: Tiered API Access Manager IaC - Verification Code
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/cognito-pre-signup-trigger
      Handler: index.handler
      Runtime: nodejs20.x
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  PreSignUpLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUpFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  CognitoPostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/cognito-post-confirmation-trigger
      Handler: index.handler
      Runtime: nodejs20.x
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt CognitoPostConfirmationDLQ.Arn
      Environment:
        Variables:
          ACCOUNTCREATEDTOPIC_TOPIC_NAME: !GetAtt AccountCreatedTopic.TopicName
          ACCOUNTCREATEDTOPIC_TOPIC_ARN: !Ref AccountCreatedTopic
          COGNITOPOSTCONFIRMATIONDLQ_QUEUE_NAME: !GetAtt CognitoPostConfirmationDLQ.QueueName
          COGNITOPOSTCONFIRMATIONDLQ_QUEUE_ARN: !GetAtt CognitoPostConfirmationDLQ.Arn
          COGNITOPOSTCONFIRMATIONDLQ_QUEUE_URL: !Ref CognitoPostConfirmationDLQ
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt CognitoPostConfirmationDLQ.QueueName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt AccountCreatedTopic.TopicName
      Timeout: 30
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  PostConfirmationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoPostConfirmationFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  CognitoCustomMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/cognito-custom-message
      Handler: index.handler
      Runtime: nodejs20.x
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  CustomMessageLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoCustomMessageFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  # FrontEnd API --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  FrontEndApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /make-credit-card-payment:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MakeCreditCardPaymentFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
          /get-account-credit-card:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAccountCreditCardFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
          /edit-account-credit-card:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EditAccountCreditCardFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EditAccountCreditCardFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EditAccountCreditCardFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
          /get-account-api-key:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAccountApiKeyFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
          /reset-account-api-key:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResetAccountApiKeyFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
          /delete-account:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteAccountFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
          /get-account-payment-history:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAccountPaymentHistoryFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
          /dev-reset-account:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResetAccountFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
          /dev-format-account:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FormatAccountFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
          /dev-create-test-user:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTestUserFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
          /dev-invoke-renew-subscriptions:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvokeRenewSubscriptionsFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
          /dev-poll-all-payments:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PollAllPaymentsFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
          /dev-reset-invocation-quota:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResetInvocationQuotaFunction.Arn}/invocations
              responses: {}
              security:
                - CognitoAuthorizer: []
      Cors:
        AllowOrigin: '''*'''
        AllowMethods: '''GET,OPTIONS,POST,PUT,DELETE'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        MaxAge: 5
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # DynamoDB Tables --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  ApiKeysTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: nextPayment
          AttributeType: S # Define nextPayment as an attribute
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH # Partition key (primary key)
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      GlobalSecondaryIndexes:
        - IndexName: NextPaymentIndex # GSI name
          KeySchema:
            - AttributeName: nextPayment # GSI Partition Key
              KeyType: HASH
          Projection:
            ProjectionType: ALL # Project all attributes in the GSI
  PaymentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: date
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  CreditCardsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  ApiKeyIdMapTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # Synchronous Lambda Functions --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  MakeCreditCardPaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/make-credit-card-payment
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          CREDITCARDSTABLE_TABLE_NAME: !Ref CreditCardsTable
          CREDITCARDSTABLE_TABLE_ARN: !GetAtt CreditCardsTable.Arn
          PAYMENTSUCCESSTOPIC_TOPIC_NAME: !GetAtt PaymentSuccessTopic.TopicName
          PAYMENTSUCCESSTOPIC_TOPIC_ARN: !Ref PaymentSuccessTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt PaymentSuccessTopic.TopicName
        - DynamoDBCrudPolicy:
            TableName: !Ref CreditCardsTable
      Events:
        FrontEndApiPOSTmakecreditcardpayment:
          Type: Api
          Properties:
            Path: /make-credit-card-payment
            Method: POST
            RestApiId: !Ref FrontEndApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  GetAccountCreditCardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/get-account-credit-card
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          CREDITCARDSTABLE_TABLE_NAME: !Ref CreditCardsTable
          CREDITCARDSTABLE_TABLE_ARN: !GetAtt CreditCardsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CreditCardsTable
      Events:
        FrontEndApiGETgetaccountcreditcard:
          Type: Api
          Properties:
            Path: /get-account-credit-card
            Method: GET
            RestApiId: !Ref FrontEndApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  DeleteAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/delete-account
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          APIKEYSTABLE_TABLE_NAME: !Ref ApiKeysTable
          APIKEYSTABLE_TABLE_ARN: !GetAtt ApiKeysTable.Arn
          CREDITCARDSTABLE_TABLE_NAME: !Ref CreditCardsTable
          CREDITCARDSTABLE_TABLE_ARN: !GetAtt CreditCardsTable.Arn
          USERPOOL_USER_POOL_ID: !Ref UserPool
          USERPOOL_USER_POOL_ARN: !GetAtt UserPool.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CreditCardsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ApiKeysTable
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminDeleteUser
            Resource:
              - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:Admin*
                - cognito-idp:DescribeIdentityProvider
                - cognito-idp:DescribeResourceServer
                - cognito-idp:DescribeUserPool
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:DescribeUserPoolDomain
                - cognito-idp:GetGroup
                - cognito-idp:ListGroups
                - cognito-idp:ListUserPoolClients
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:UpdateGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        FrontEndApiDELETEdeleteaccount:
          Type: Api
          Properties:
            Path: /delete-account
            Method: DELETE
            RestApiId: !Ref FrontEndApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  GetAccountApiKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/get-account-api-key
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          APIKEYSTABLE_TABLE_NAME: !Ref ApiKeysTable
          APIKEYSTABLE_TABLE_ARN: !GetAtt ApiKeysTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ApiKeysTable
      Events:
        FrontEndApiGETgetaccountapikey:
          Type: Api
          Properties:
            Path: /get-account-api-key
            Method: GET
            RestApiId: !Ref FrontEndApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  GetAccountPaymentHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/get-account-payment-history
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          PAYMENTSTABLE_TABLE_NAME: !Ref PaymentsTable
          PAYMENTSTABLE_TABLE_ARN: !GetAtt PaymentsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentsTable
      Events:
        FrontEndApiGETgetaccountpaymenthistory:
          Type: Api
          Properties:
            Path: /get-account-payment-history
            Method: GET
            RestApiId: !Ref FrontEndApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  EditAccountCreditCardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/edit-account-credit-card
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          CREDITCARDSTABLE_TABLE_NAME: !Ref CreditCardsTable
          CREDITCARDSTABLE_TABLE_ARN: !GetAtt CreditCardsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CreditCardsTable
      Events:
        FrontEndApiPOSTeditaccountcreditcard:
          Type: Api
          Properties:
            Path: /edit-account-credit-card
            Method: POST
            RestApiId: !Ref FrontEndApi
        FrontEndApiPUTeditaccountcreditcard:
          Type: Api
          Properties:
            Path: /edit-account-credit-card
            Method: PUT
            RestApiId: !Ref FrontEndApi
        FrontEndApiDELETEeditaccountcreditcard:
          Type: Api
          Properties:
            Path: /edit-account-credit-card
            Method: DELETE
            RestApiId: !Ref FrontEndApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  ResetAccountApiKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/reset-account-api-key
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          APIKEYSTABLE_TABLE_NAME: !Ref ApiKeysTable
          APIKEYSTABLE_TABLE_ARN: !GetAtt ApiKeysTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ApiKeysTable
      Events:
        FrontEndApiPOSTresetaccountapikey:
          Type: Api
          Properties:
            Path: /reset-account-api-key
            Method: POST
            RestApiId: !Ref FrontEndApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false

  # Development Synchronous Lambda Functions --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  ResetAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/dev-reset-account
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          APIKEYSTABLE_TABLE_NAME: !Ref ApiKeysTable
          APIKEYSTABLE_TABLE_ARN: !GetAtt ApiKeysTable.Arn
          CREDITCARDSTABLE_TABLE_NAME: !Ref CreditCardsTable
          CREDITCARDSTABLE_TABLE_ARN: !GetAtt CreditCardsTable.Arn
          PAYMENTSTABLE_TABLE_NAME: !Ref PaymentsTable
          PAYMENTSTABLE_TABLE_ARN: !GetAtt PaymentsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ApiKeysTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CreditCardsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentsTable
      Events:
        FrontEndApiGETdevresetaccount:
          Type: Api
          Properties:
            Path: /dev-reset-account
            Method: GET
            RestApiId: !Ref FrontEndApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  FormatAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/dev-format-account
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          APIKEYSTABLE_TABLE_NAME: !Ref ApiKeysTable
          APIKEYSTABLE_TABLE_ARN: !GetAtt ApiKeysTable.Arn
          PAYMENTSTABLE_TABLE_NAME: !Ref PaymentsTable
          PAYMENTSTABLE_TABLE_ARN: !GetAtt PaymentsTable.Arn
          CREDITCARDSTABLE_TABLE_NAME: !Ref CreditCardsTable
          CREDITCARDSTABLE_TABLE_ARN: !GetAtt CreditCardsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ApiKeysTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CreditCardsTable
      Events:
        FrontEndApiGETdevformataccount:
          Type: Api
          Properties:
            Path: /dev-format-account
            Method: GET
            RestApiId: !Ref FrontEndApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  CreateTestUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/dev-create-test-user
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          APIKEYSTABLE_TABLE_NAME: !Ref ApiKeysTable
          APIKEYSTABLE_TABLE_ARN: !GetAtt ApiKeysTable.Arn
          PAYMENTSTABLE_TABLE_NAME: !Ref PaymentsTable
          PAYMENTSTABLE_TABLE_ARN: !GetAtt PaymentsTable.Arn
          CREDITCARDSTABLE_TABLE_NAME: !Ref CreditCardsTable
          CREDITCARDSTABLE_TABLE_ARN: !GetAtt CreditCardsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ApiKeysTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CreditCardsTable
      Events:
        FrontEndApiGETdevcreatetestuser:
          Type: Api
          Properties:
            Path: /dev-create-test-user
            Method: GET
            RestApiId: !Ref FrontEndApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  PollAllPaymentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/dev-poll-all-payments
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          PAYMENTSTABLE_TABLE_NAME: !Ref PaymentsTable
          PAYMENTSTABLE_TABLE_ARN: !GetAtt PaymentsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentsTable
      Events:
        FrontEndApiGETdevpollallpayments:
          Type: Api
          Properties:
            Path: /dev-poll-all-payments
            Method: GET
            RestApiId: !Ref FrontEndApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  InvokeRenewSubscriptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/dev-invoke-renew-subscriptions
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        FrontEndApiGETdevinvokemonthlybilling:
          Type: Api
          Properties:
            Path: /dev-invoke-renew-subscriptions
            Method: GET
            RestApiId: !Ref FrontEndApi
      Environment:
        Variables:
          RENEWSUBSCRIPTIONSQUEUE_QUEUE_NAME: !GetAtt RenewSubscriptionsQueue.QueueName
          RENEWSUBSCRIPTIONSQUEUE_QUEUE_ARN: !GetAtt RenewSubscriptionsQueue.Arn
          RENEWSUBSCRIPTIONSQUEUE_QUEUE_URL: !Ref RenewSubscriptionsQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt RenewSubscriptionsQueue.QueueName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  ResetInvocationQuotaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/dev-reset-invocation-quota
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        FrontEndApiGETdevinvokemonthlybilling:
          Type: Api
          Properties:
            Path: /dev-reset-invocation-quota
            Method: GET
            RestApiId: !Ref FrontEndApi
      Environment:
        Variables:
          APIKEYIDMAPTABLE_TABLE_NAME: !Ref ApiKeyIdMapTable
          APIKEYIDMAPTABLE_TABLE_ARN: !GetAtt ApiKeyIdMapTable.Arn
          APIKEYTHROTTLEDAPI_API_URL: !Sub https://${ApiKeyThrottledApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiKeyThrottledApi.Stage}
          USAGE_PLAN_PAID_ID: !Ref UsagePlanPaid
          USAGE_PLAN_FREE_ID: !Ref UsagePlanFree
          APIKEYSTABLE_TABLE_NAME: !Ref ApiKeysTable
          APIKEYSTABLE_TABLE_ARN: !GetAtt ApiKeysTable.Arn
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - execute-api:Invoke
              - apigateway:POST
              - apigateway:GET
              - apigateway:DELETE
              - apigateway:PUT
              - apigateway:PATCH
            Resource:
              - '*'
        - DynamoDBCrudPolicy:
            TableName: !Ref ApiKeyIdMapTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:Invoke
              Resource:
                - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiKeyThrottledApi}/${ApiKeyThrottledApi.Stage}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref ApiKeysTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false

  # SNS Topics --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  AccountCreatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt EditAccountApiKeyQueue.Arn
          Protocol: sqs
  PaymentSuccessTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt EditAccountApiKeyQueue.Arn
          Protocol: sqs
        - Endpoint: !GetAtt AppendPaymentQueue.Arn
          Protocol: sqs
  PaymentFailureTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt EditAccountApiKeyQueue.Arn
          Protocol: sqs
        - Endpoint: !GetAtt PaymentFailureQueue.Arn
          Protocol: sqs
  CloudWatchAlarmTopic:
    Type: AWS::SNS::Topic

  # SQS Queues --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  EditAccountApiKeyQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EditAccountApiKeyDLQ.Arn
        maxReceiveCount: 5
      MessageRetentionPeriod: 345600
  AppendPaymentQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AppendPaymentDLQ.Arn
        maxReceiveCount: 5
  PaymentFailureQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PaymentFailureDLQ.Arn
        maxReceiveCount: 5
  RenewSubscriptionsQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt RenewSubscriptionsDLQ.Arn
        maxReceiveCount: 5

  # Scheduler ------- ^ periodically send a message to the RenewSubscriptionsQueue---------------------------------------------------------------------------------------------------------------------------
  DailyBillingSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: rate(5 minutes)
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt RenewSubscriptionsQueue.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"message": "Scheduled payment processing event"}'
  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SchedulerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt RenewSubscriptionsQueue.Arn

  # SQS DLQ's --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  EditAccountApiKeyDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600
  CognitoPostConfirmationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600
  RenewSubscriptionsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600
  AppendPaymentDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600
  PaymentFailureDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600
  DynamoDbStreamApiKeyHandlerDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600

  #  SQS Resource-based Policies --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  EditAccountApiKeyQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource: !GetAtt EditAccountApiKeyQueue.Arn
            Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref AccountCreatedTopic
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource: !GetAtt EditAccountApiKeyQueue.Arn
            Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref PaymentSuccessTopic
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource: !GetAtt EditAccountApiKeyQueue.Arn
            Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref PaymentFailureTopic
      Queues:
        - !Ref EditAccountApiKeyQueue
  AppendPaymentQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource: !GetAtt AppendPaymentQueue.Arn
            Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref PaymentSuccessTopic
      Queues:
        - !Ref AppendPaymentQueue
  PaymentFailureQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource: !GetAtt PaymentFailureQueue.Arn
            Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref PaymentFailureTopic
      Queues:
        - !Ref PaymentFailureQueue

  # Asynchronous Lambda Functions --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  EditAccountApiKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/edit-account-api-key
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        EditAccountApiKeyQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt EditAccountApiKeyQueue.Arn
            BatchSize: 1
      Environment:
        Variables:
          APIKEYSTABLE_TABLE_NAME: !Ref ApiKeysTable
          APIKEYSTABLE_TABLE_ARN: !GetAtt ApiKeysTable.Arn
          ACCOUNTCREATEDTOPIC_TOPIC_ARN: !Ref AccountCreatedTopic
          PAYMENTSUCCESSTOPIC_TOPIC_ARN: !Ref PaymentSuccessTopic
          PAYMENTFAILURETOPIC_TOPIC_ARN: !Ref PaymentFailureTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ApiKeysTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  RenewSubscriptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/renew-subscriptions
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          PAYMENTSTABLE_TABLE_NAME: !Ref PaymentsTable
          PAYMENTSTABLE_TABLE_ARN: !GetAtt PaymentsTable.Arn
          CREDITCARDSTABLE_TABLE_NAME: !Ref CreditCardsTable
          CREDITCARDSTABLE_TABLE_ARN: !GetAtt CreditCardsTable.Arn
          APIKEYSTABLE_TABLE_NAME: !Ref ApiKeysTable
          APIKEYSTABLE_TABLE_ARN: !GetAtt ApiKeysTable.Arn
          PAYMENTSUCCESSTOPIC_TOPIC_NAME: !GetAtt PaymentSuccessTopic.TopicName
          PAYMENTSUCCESSTOPIC_TOPIC_ARN: !Ref PaymentSuccessTopic
          PAYMENTFAILURETOPIC_TOPIC_NAME: !GetAtt PaymentFailureTopic.TopicName
          PAYMENTFAILURETOPIC_TOPIC_ARN: !Ref PaymentFailureTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt PaymentFailureTopic.TopicName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt PaymentSuccessTopic.TopicName
        - DynamoDBCrudPolicy:
            TableName: !Ref CreditCardsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ApiKeysTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentsTable
      Events:
        RenewSubscriptionsQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt RenewSubscriptionsQueue.Arn
            BatchSize: 1
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  AppendPaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/append-payment
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        AppendPaymentQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt AppendPaymentQueue.Arn
            BatchSize: 1
      Environment:
        Variables:
          PAYMENTSTABLE_TABLE_NAME: !Ref PaymentsTable
          PAYMENTSTABLE_TABLE_ARN: !GetAtt PaymentsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentsTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt PaymentSuccessTopic.TopicName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  PaymentFailureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/payment-failure
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PaymentFailureQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt PaymentFailureQueue.Arn
            BatchSize: 1
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  DynamoDbStreamApiKeyHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/dynamodb-stream-api-key-handler
      Handler: index.handler
      Runtime: nodejs20.x
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DynamoDbStreamApiKeyHandlerDLQ.Arn
      Environment:
        Variables:
          DYNAMODBSTREAMAPIKEYHANDLERDLQ_QUEUE_NAME: !GetAtt DynamoDbStreamApiKeyHandlerDLQ.QueueName
          DYNAMODBSTREAMAPIKEYHANDLERDLQ_QUEUE_ARN: !GetAtt DynamoDbStreamApiKeyHandlerDLQ.Arn
          DYNAMODBSTREAMAPIKEYHANDLERDLQ_QUEUE_URL: !Ref DynamoDbStreamApiKeyHandlerDLQ
          APIKEYTHROTTLEDAPI_API_URL: !Sub https://${ApiKeyThrottledApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiKeyThrottledApi.Stage}
          USAGE_PLAN_PAID_ID: !Ref UsagePlanPaid
          USAGE_PLAN_FREE_ID: !Ref UsagePlanFree
          APIKEYIDMAPTABLE_TABLE_NAME: !Ref ApiKeyIdMapTable
          APIKEYIDMAPTABLE_TABLE_ARN: !GetAtt ApiKeyIdMapTable.Arn
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DynamoDbStreamApiKeyHandlerDLQ.QueueName
        - Statement:
            Effect: Allow
            Action:
              - execute-api:Invoke
              - apigateway:POST
              - apigateway:GET
              - apigateway:DELETE
              - apigateway:PUT
              - apigateway:PATCH
            Resource:
              - '*'
        - DynamoDBCrudPolicy:
            TableName: !Ref ApiKeyIdMapTable
      Events:
        ApiKeysTable:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ApiKeysTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false

  #  CloudWatch  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  CloudWatchAlarmTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref CloudWatchAlarmTopic
      Endpoint: !Ref NotificationEmail
  EditAccountApiKeyDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Triggers when there is at least one message in the DLQ
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt EditAccountApiKeyDLQ.QueueName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref CloudWatchAlarmTopic
      TreatMissingData: notBreaching
  CognitoConfirmationDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Triggers when there is at least one message in the DLQ
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt CognitoPostConfirmationDLQ.QueueName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref CloudWatchAlarmTopic
      TreatMissingData: notBreaching
  AppendPaymentDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Triggers when there is at least one message in the DLQ
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AppendPaymentDLQ.QueueName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref CloudWatchAlarmTopic
      TreatMissingData: notBreaching
  RenewSubscriptionsDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Triggers when there is at least one message in the DLQ
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt RenewSubscriptionsDLQ.QueueName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref CloudWatchAlarmTopic
      TreatMissingData: notBreaching
  PaymentFailureDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Triggers when there is at least one message in the DLQ
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt PaymentFailureDLQ.QueueName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref CloudWatchAlarmTopic
      TreatMissingData: notBreaching
  DynamoDbStreamApiKeyHandlerDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Triggers when there is at least one message in the DLQ
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DynamoDbStreamApiKeyHandlerDLQ.QueueName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref CloudWatchAlarmTopic
      TreatMissingData: notBreaching
  # ^ Resourece-based policies to allow Cognito to invoke the Lambda function

  # VPC, Subnets, Route Tables, Security Groups, EC2 Launch Template, Auto Scaling Group, Application Load Balancer ------------------------------------------------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Create an Internet Gateway and attach it to the VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Create Elastic IP for NAT Gateway
  NatElasticIP:
    Type: AWS::EC2::EIP

  # Create NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1 # NAT Gateway needs to be in a public subnet

  # Create Public and Private Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Ref PublicSubnet1Az
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Ref PublicSubnet2Az
      MapPublicIpOnLaunch: true
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Ref PrivateSubnet1Az
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Ref PrivateSubnet2Az

  # Route Table for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Route Table with Subnets 
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Route Table for Private Subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Route for Private Subnets to use the NAT Gateway
  PrivateRouteForNatGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Associate Route Table with Subnets
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for EC2 instances in private subnets
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to EC2 instances and allow outbound
        traffic to the Internet via NAT Gateway
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 192.168.0.0/16 # Allow traffic from within the VPC (e.g., from the ALB)
      SecurityGroupEgress:
        - IpProtocol: '-1' # Allow all protocols
          FromPort: -1 # Allow all ports
          ToPort: -1 # Allow all ports
          CidrIp: 0.0.0.0/0 # Allow outbound traffic (this will be routed through the NAT Gateway for private subnets)

  # Security Group for ALB (internet-facing)
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic from the internet to ALB and forward to EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Allow traffic from anywhere on port 80 (HTTP)
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          DestinationSecurityGroupId: !Ref EC2SecurityGroup # Forward traffic to EC2 Security Group

  # Create Launch Template for EC2 instances
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData: !Base64 |
          #!/bin/bash
          # Install Node.js
          curl -sL https://rpm.nodesource.com/setup_18.x | sudo bash -
          sudo dnf install nodejs -y
          # Navigate to the home directory
          cd /home/ec2-user
          # Create a directory for the test Node.js Express server
          mkdir test-express-server
          cd test-express-server
          # Initialize the Node.js project and install dependencies
          sudo npm init -y
          sudo npm install express cors
          # Create the server.js file
          cat << 'EOF' > server.js
          const express = require("express");
          const cors = require("cors");
          const app = express();
          app.use(cors({ origin: "*" }));
          app.get("/", (req, res) => {
            res.json({ success: true, message: "Hello World" });
          });
          app.get("/health", (req, res) => {
            res.status(200).json({ success: true, message: "Health check passed" });
          });
          app.listen(80, () => {
            console.log("Server is running on port 80");
          });
          EOF
          # Start the server
          sudo node server.js

  # Create Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: EC2 # or ELB if you want health checks from the ALB
      HealthCheckGracePeriod: 300 # 300 seconds (5 minutes)

  # Create Target Group for ALB
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health

  # Create ALB
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing

  # Create ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # ApiKey Throttled API --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  ApiKeyThrottledApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: 3.0.1
        info: {}
        paths:
          /:
            get:
              security:
                - api-key: [] # Require API key for GET
              x-amazon-apigateway-integration:
                uri: !Sub http://${LoadBalancer.DNSName}
                httpMethod: GET
                type: http_proxy
                connectionType: INTERNET
              responses: {}
        components:
          securitySchemes:
            api-key:
              type: apiKey
              name: x-api-key
              in: header
              x-amazon-apigateway-api-key-source: HEADER
      Cors:
        AllowOrigin: '''*'''
        AllowMethods: '''GET,OPTIONS,POST,PUT,DELETE'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        MaxAge: 5
  UsagePlanPaid:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: Paid
      Description: Paid Usage Plan
      ApiStages:
        - ApiId: !Ref ApiKeyThrottledApi
          Stage: !Ref ApiKeyThrottledApi.Stage
      Quota:
        Limit: !Ref PaidUsagePlanQuotaLimit
        Period: DAY
      Throttle:
        BurstLimit: !Ref PaidUsagePlanBurstLimit
        RateLimit: !Ref PaidUsagePlanRateLimit
  UsagePlanFree:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: Free
      Description: Free Usage Plan
      ApiStages:
        - ApiId: !Ref ApiKeyThrottledApi
          Stage: !Ref ApiKeyThrottledApi.Stage
      Quota:
        Limit: !Ref FreeUsagePlanQuotaLimit
        Period: DAY
      Throttle:
        BurstLimit: !Ref FreeUsagePlanBurstLimit
        RateLimit: !Ref FreeUsagePlanRateLimit

  # S3 Bucket for Website Hosting --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  S3StaticHostingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-website-bucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  S3StaticHostingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3StaticHostingBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${S3StaticHostingBucket}/*

Metadata:
  AWS::Composer::Groups:
    Group:
      Label: API Gateway Lambda Functions
      Members:
        - GetAccountCreditCardFunction
        - DeleteAccountFunction
        - ResetAccountApiKeyFunction
        - GetAccountApiKeyFunction
        - GetAccountPaymentHistoryFunction
        - MakeCreditCardPaymentFunction
        - EditAccountCreditCardFunction
    Group2:
      Label: Cognito Logic
      Members:
        - UserPoolClient
        - UserPool
        - CognitoCustomMessageFunction
        - CognitoPostConfirmationFunction
        - PreSignUpFunction
    Group3:
      Label: SNS Topics
      Members:
        - AccountCreatedTopic
        - Group9
        - PaymentSuccessTopic
        - PaymentFailureTopic
    Group4:
      Label: Async SQS Invoked Functions
      Members:
        - RenewSubscriptionsFunction
        - EditAccountApiKeyFunction
        - PaymentFailureFunction
        - AppendPaymentFunction
    Group6:
      Label: DLQ's
      Members:
        - EditAccountApiKeyDLQ
        - AppendPaymentDLQ
        - CognitoPostConfirmationDLQ
        - DynamoDbStreamApiKeyHandlerDLQ
        - RenewSubscriptionsDLQ
        - PaymentFailureDLQ
    Group7:
      Label: DynamoDB Tables
      Members:
        - PaymentsTable
        - CreditCardsTable
        - ApiKeyIdMapTable
        - ApiKeysTable
    Group8:
      Label: Development API Gateway Lambda Functions
      Members:
        - ResetAccountFunction
        - FormatAccountFunction
        - CreateTestUserFunction
        - InvokeRenewSubscriptionsFunction
        - PollAllPaymentsFunction
        - ResetInvocationQuotaFunction
    Group10:
      Label: CloudWatch DLQ Alarms
      Members:
        - EditAccountApiKeyDLQAlarm
        - DynamoDbStreamApiKeyHandlerDLQAlarm
        - AppendPaymentDLQAlarm
        - CognitoConfirmationDLQAlarm
        - RenewSubscriptionsDLQAlarm
        - PaymentFailureDLQAlarm
    Group11:
      Label: Lambda Invoking Queues
      Members:
        - EditAccountApiKeyQueue
        - AppendPaymentQueue
        - PaymentFailureQueue
        - Group12
    Group9:
      Label: Email When Alarm Is Invoked
      Members:
        - CloudWatchAlarmTopic
        - CloudWatchAlarmTopicSubscription
    Group12:
      Label: Scheduled Invocation
      Members:
        - DailyBillingSchedule
        - RenewSubscriptionsQueue
    Group5:
      Label: SQS Resource-based policies
      Members:
        - EditAccountApiKeyQueuePolicy
        - AppendPaymentQueuePolicy
        - PaymentFailureQueuePolicy
    Group13:
      Label: Throttled API
      Members:
        - ApiKeyThrottledApi
        - UsagePlanPaid
        - UsagePlanFree
    Group14:
      Label: DynamoDB Streams
      Members:
        - DynamoDbStreamApiKeyHandlerFunction
    Group15:
      Label: VPC, Subnets, Route Tables, Security Groups, EC2 Launch Template, Auto
        Scaling Group, Application Load Balancer
      Members:
        - PrivateSubnet2
        - EC2SecurityGroup
        - ALBSecurityGroup
        - LoadBalancer
        - TargetGroup
        - LaunchTemplate
        - AutoScalingGroup
        - ALBListener
    Group16:
      Label: Paid Service
      Members:
        - Group13
        - Group15